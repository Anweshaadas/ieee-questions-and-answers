1.Given a string s, find the length of the longest substring without repeating characters.

def length_of_longest_substring(s: str) -> int:
    char_index = {}
    max_length = 0
    start = 0

    for end in range(len(s)):
        if s[end] in char_index:
            start = max(start, char_index[s[end]] + 1)
        char_index[s[end]] = end
        max_length = max(max_length, end - start + 1)

    return max_length

test_cases = [
    ("workattech", 10),
    ("mississippi", 11)
]

for s, n in test_cases:
    print(length_of_longest_substring(s))

2.There is a staircase with n steps. You need to reach the top and you can either climb 1 step or 2 steps at a time. In how many distinct ways can you reach the top of the staircase?

def climb_stairs(n: int) -> int:
    if n <= 2:
        return n
    first, second = 1, 2
    for _ in range(3, n + 1):
        first, second = second, first + second
    return second

test_cases = [2, 4]

for n in test_cases:
    print(climb_stairs(n))

3. Given a range L to R, find the highest occurring digit in prime numbers which lie between L and R. If multiple digits have the same highest frequency, return the largest of them. If no prime number occurs between L and R, return -1.

def is_prime(num: int) -> bool:
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def highest_occurring_digit_in_primes(L: int, R: int) -> int:
    digit_count = [0] * 10
    
    for num in range(L, R + 1):
        if is_prime(num):
            for digit in str(num):
                digit_count[int(digit)] += 1
    
    max_count = max(digit_count)
    if max_count == 0:
        return -1
    
    return max(i for i, count in enumerate(digit_count) if count == max_count)

test_cases = [(2, 10), (2, 20)]

for L, R in test_cases:
    print(highest_occurring_digit_in_primes(L, R))


